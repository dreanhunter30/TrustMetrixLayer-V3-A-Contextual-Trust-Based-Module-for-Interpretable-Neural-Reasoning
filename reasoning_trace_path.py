
import numpy as np
from tabulate import tabulate

def trace_reasoning_path(model, step=-1, top_n=5):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—ç—Ç–∞–ø–Ω–æ, –∫–∞–∫ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Å–ª–æ—è–º,
    –∫–∞–∫–∏–µ –ø–æ–ª—É—á–∏–ª–∏ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –∏ –∫–∞–∫ —ç—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –∫ —Ä–µ—à–µ–Ω–∏—é.
    """

    trace_map = []

    for i, trust in enumerate(model.trust_layers):
        if not trust.log:
            continue
        record = trust.log[step]
        for j in range(len(record['input'])):
            i1 = np.asarray(record['input'][j]).flatten()[0]
            ctx = record['context'][j] if len(record['context'].shape) > 1 else record['context']
            w = np.asarray(record['weights'][j]).flatten()[0]
            o = np.asarray(record['output'][j]).flatten()[0]
            trace_map.append({
                "layer": f"Trust-{i+1}",
                "feature": f"x{j}",
                "input": float(i1),
                "context": [float(c) for c in ctx],
                "trust": float(w),
                "output": float(o),
                "influence": abs(i1 * w)
            })

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–ª–∏—è–Ω–∏—é
    trace_map = sorted(trace_map, key=lambda x: -x["influence"])

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ø-N –ø–æ –≤–ª–∏—è–Ω–∏—é
    print(f"üîç –ù–∞–∏–±–æ–ª–µ–µ –≤–ª–∏—è—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ reasoning-–ø—É—Ç–∏ (top {top_n}):\n")
    rows = []
    for entry in trace_map[:top_n]:
        rows.append([
            entry["layer"],
            entry["feature"],
            f"{entry['input']:.3f}",
            "[" + ", ".join(f"{c:.2f}" for c in entry["context"]) + "]",
            f"{entry['trust']:.3f}",
            f"{entry['output']:.3f}",
            f"{entry['influence']:.3f}"
        ])

    headers = ["–°–ª–æ–π", "–ü—Ä–∏–∑–Ω–∞–∫", "–í—Ö–æ–¥", "–ö–æ–Ω—Ç–µ–∫—Å—Ç", "–î–æ–≤–µ—Ä–∏–µ", "–í—ã—Ö–æ–¥", "–í–ª–∏—è–Ω–∏–µ"]
    print(tabulate(rows, headers=headers, tablefmt="grid"))

    return trace_map
